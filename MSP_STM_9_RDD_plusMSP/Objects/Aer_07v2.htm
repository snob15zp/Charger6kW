<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Aer_07v2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Aer_07v2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 26 16:36:46 2020
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
FLAG_checkAndWrite &rArr; FLAG_checkAllFlags &rArr; FLAG_checkFlagTrig &rArr; FLAG_logFlag
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[81]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">NMI_Handler</a><BR>
 <LI><a href="#[19]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">HardFault_Handler</a><BR>
 <LI><a href="#[1a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">MemManage_Handler</a><BR>
 <LI><a href="#[1b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">BusFault_Handler</a><BR>
 <LI><a href="#[1c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">UsageFault_Handler</a><BR>
 <LI><a href="#[1d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">SVC_Handler</a><BR>
 <LI><a href="#[1e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">PendSV_Handler</a><BR>
 <LI><a href="#[35]">CAN_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">CAN_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ADC1_2_IRQHandler</a> from dcdc.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1b]">BusFault_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[35]">CAN_RX0_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[36]">CAN_RX1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[37]">CAN_SCE_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[34]">CAN_TX_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[58]">CFG_getStatus</a> from cfg.o(i.CFG_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[5c]">COMMS_getStatus</a> from comms.o(i.COMMS_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[10]">COMMS_sendFlag</a> from comms.o(i.COMMS_sendFlag) referenced 2 times from sch.o(.data)
 <LI><a href="#[a]">COMMS_sendHeartbeat</a> from comms.o(i.COMMS_sendHeartbeat) referenced 2 times from sch.o(.data)
 <LI><a href="#[e]">COMMS_sendOcQMeas</a> from comms.o(i.COMMS_sendOcQMeas) referenced 2 times from sch.o(.data)
 <LI><a href="#[d]">COMMS_sendOutMeas</a> from comms.o(i.COMMS_sendOutMeas) referenced 2 times from sch.o(.data)
 <LI><a href="#[12]">COMMS_sendOutVoltCmd</a> from comms.o(i.COMMS_sendOutVoltCmd) referenced 2 times from sch.o(.data)
 <LI><a href="#[14]">COMMS_sendP2pPacket</a> from comms.o(i.COMMS_sendP2pPacket) referenced 2 times from sch.o(.data)
 <LI><a href="#[f]">COMMS_sendPowTemprMeas</a> from comms.o(i.COMMS_sendPowTemprMeas) referenced 2 times from sch.o(.data)
 <LI><a href="#[c]">COMMS_sendPvMeas</a> from comms.o(i.COMMS_sendPvMeas) referenced 2 times from sch.o(.data)
 <LI><a href="#[b]">COMMS_sendStatus</a> from comms.o(i.COMMS_sendStatus) referenced 2 times from sch.o(.data)
 <LI><a href="#[11]">COMMS_sendTime</a> from comms.o(i.COMMS_sendTime) referenced 2 times from sch.o(.data)
 <LI><a href="#[49]">COMP2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4a]">COMP4_6_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[5]">CTRL_calcOutVoltSetpoints</a> from ctrl.o(i.CTRL_calcOutVoltSetpoints) referenced 2 times from sch.o(.data)
 <LI><a href="#[9]">CTRL_checkBulkFloat</a> from ctrl.o(i.CTRL_checkBulkFloat) referenced 2 times from sch.o(.data)
 <LI><a href="#[5e]">CTRL_getStatus</a> from ctrl.o(i.CTRL_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[2c]">DMA1_Channel1_IRQHandler</a> from dcdc.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel4_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[30]">DMA1_Channel5_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[31]">DMA1_Channel6_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[32]">DMA1_Channel7_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1e]">DebugMon_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[27]">EXTI0_IRQHandler</a> from dcdc.o(i.EXTI0_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[28]">EXTI1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[29]">EXTI2_TSC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2a]">EXTI3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[38]">EXTI9_5_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[7]">FLAG_checkAndWrite</a> from flag.o(i.FLAG_checkAndWrite) referenced 2 times from sch.o(.data)
 <LI><a href="#[56]">FLAG_eraseDoneCallback</a> from flag.o(i.FLAG_eraseDoneCallback) referenced from comms.o(i.COMMS_receive)
 <LI><a href="#[5a]">FLAG_getStatus</a> from flag.o(i.FLAG_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[25]">FLASH_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[5d]">FLASH_getStatus</a> from flash.o(i.FLASH_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[52]">FPU_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[51]">HRTIM1_FLT_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4b]">HRTIM1_Master_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4c]">HRTIM1_TIMA_IRQHandler</a> from dcdc.o(i.HRTIM1_TIMA_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[50]">HRTIM1_TIME_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[19]">HardFault_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[15]">IO_fanDrvPWM</a> from io.o(i.IO_fanDrvPWM) referenced 2 times from sch.o(.data)
 <LI><a href="#[16]">IO_fanSetSpeed</a> from io.o(i.IO_fanSetSpeed) referenced 2 times from sch.o(.data)
 <LI><a href="#[3]">MEAS_updateCharge</a> from meas.o(i.MEAS_updateCharge) referenced 2 times from sch.o(.data)
 <LI><a href="#[4]">MEAS_updateTempr</a> from meas.o(i.MEAS_updateTempr) referenced 2 times from sch.o(.data)
 <LI><a href="#[1a]">MemManage_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[18]">NMI_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[22]">PVD_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1f]">PendSV_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[26]">RCC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[46]">RTC_Alarm_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[24]">RTC_WKUP_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[5f]">SAFETY_getStatus</a> from safety.o(i.SAFETY_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[41]">SPI1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[59]">STATS_getStatus</a> from stats.o(i.STATS_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[6]">STATS_updateAll</a> from stats.o(i.STATS_updateAll) referenced 2 times from sch.o(.data)
 <LI><a href="#[1d]">SVC_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[53]">SystemInit</a> from system_stm32f3xx.o(i.SystemInit) referenced from startup_stm32f334x8.o(.text)
 <LI><a href="#[23]">TAMP_STAMP_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[5b]">TELEM_getStatus</a> from telem.o(i.TELEM_getStatus) referenced from status.o(.constdata)
 <LI><a href="#[8]">TELEM_logIfPeriodElapsed</a> from telem.o(i.TELEM_logIfPeriodElapsed) referenced 2 times from sch.o(.data)
 <LI><a href="#[39]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3c]">TIM1_CC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3b]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3a]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3d]">TIM2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3e]">TIM3_IRQHandler</a> from main.o(i.TIM3_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[47]">TIM6_DAC1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[48]">TIM7_DAC2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from usci.o(i.USART1_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1c]">UsageFault_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[21]">WWDG_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[60]">__main</a> from __main.o(!!!main) referenced from startup_stm32f334x8.o(.text)
 <LI><a href="#[55]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[57]">lcd_eraseDoneCallback</a> from lcd.o(i.lcd_eraseDoneCallback) referenced from lcd.o(i.lcd_runCfgStateMachine)
 <LI><a href="#[13]">lcd_update</a> from lcd.o(i.lcd_update) referenced 2 times from sch.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[63]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[143]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[144]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[145]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[146]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[64]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[148]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[66]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[149]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[14d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[150]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[151]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[152]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[153]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[154]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[155]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[156]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[157]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[158]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[159]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[15c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[15d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[15e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[15f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[160]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[161]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[162]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[62]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[163]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[69]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[164]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mainMSPloop &rArr; COMMS_receive &rArr; MAIN_resetRemoteCfg &rArr; lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[165]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[82]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[70]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[166]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[72]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>COMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP4_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM6_DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM7_DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_tick
</UL>

<P><STRONG><a name="[167]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagTrig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagHold
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAllFlags
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_update
</UL>

<P><STRONG><a name="[168]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_local_config
</UL>

<P><STRONG><a name="[115]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadSysInfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadFactoryDefaults
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePacket
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteCalibrationBackup
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_flash
</UL>

<P><STRONG><a name="[77]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[169]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_local_config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_copyProductInfo
</UL>

<P><STRONG><a name="[16a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[16d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[7d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[172]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[174]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[6a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[67]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[7f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[130]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[73]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[178]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dcdc.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrtimersOutDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CAN_getBaseId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.CAN_getBaseId))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendHeartbeat
</UL>

<P><STRONG><a name="[96]"></a>CAN_init</STRONG> (Thumb, 676 bytes, Stack size 12 bytes, can.o(i.CAN_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[8f]"></a>CAN_receive</STRONG> (Thumb, 894 bytes, Stack size 24 bytes, can.o(i.CAN_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[127]"></a>CAN_transmit</STRONG> (Thumb, 764 bytes, Stack size 16 bytes, can.o(i.CAN_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPloop
</UL>

<P><STRONG><a name="[84]"></a>CFG_checkRanges</STRONG> (Thumb, 1170 bytes, Stack size 16 bytes, cfg.o(i.CFG_checkRanges))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CFG_checkRanges &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_init
</UL>

<P><STRONG><a name="[cf]"></a>CFG_configRangesOk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cfg.o(i.CFG_configRangesOk))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAllFlags
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
</UL>

<P><STRONG><a name="[98]"></a>CFG_getLocalCfgAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg.o(i.CFG_getLocalCfgAddr))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[97]"></a>CFG_getLocalCfgLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg.o(i.CFG_getLocalCfgLen))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[9d]"></a>CFG_getReadonlyCfgAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg.o(i.CFG_getReadonlyCfgAddr))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[9c]"></a>CFG_getReadonlyCfgLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg.o(i.CFG_getReadonlyCfgLen))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[9b]"></a>CFG_getRemoteCfgAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg.o(i.CFG_getRemoteCfgAddr))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[9a]"></a>CFG_getRemoteCfgLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg.o(i.CFG_getRemoteCfgLen))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[58]"></a>CFG_getStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cfg.o(i.CFG_getStatus))
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>CFG_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cfg.o(i.CFG_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CFG_init &rArr; CFG_checkRanges &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_calcChecksum
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_checkRanges
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[8a]"></a>COMMS_endFlashRec</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comms.o(i.COMMS_endFlashRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMMS_endFlashRec
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_endWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[8c]"></a>COMMS_endFlashSend</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, comms.o(i.COMMS_endFlashSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMMS_endFlashSend &rArr; FLASH_readStr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readStr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendP2pPacket
</UL>

<P><STRONG><a name="[a6]"></a>COMMS_endMemSend</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, comms.o(i.COMMS_endMemSend))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendP2pPacket
</UL>

<P><STRONG><a name="[5c]"></a>COMMS_getStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comms.o(i.COMMS_getStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>COMMS_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comms.o(i.COMMS_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[8e]"></a>COMMS_receive</STRONG> (Thumb, 894 bytes, Stack size 24 bytes, comms.o(i.COMMS_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = COMMS_receive &rArr; MAIN_resetRemoteCfg &rArr; lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_writeStr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_getFlagLen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_eraseStarted
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_eraseDoneCallback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_getRemoteCfgLen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_getRemoteCfgAddr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_getReadonlyCfgLen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_getReadonlyCfgAddr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_getLocalCfgLen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_getLocalCfgAddr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_recFromBc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_getBaseId
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_disablePwmCtrl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_setOutVoltCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_startMemSend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_startFlashSend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_startFlashRec
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_endFlashRec
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_canRecved
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPloop
</UL>

<P><STRONG><a name="[ab]"></a>COMMS_sendDebugPacket</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, comms.o(i.COMMS_sendDebugPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = COMMS_sendDebugPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_startFlashRec
</UL>

<P><STRONG><a name="[10]"></a>COMMS_sendFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, comms.o(i.COMMS_sendFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMMS_sendFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_getFlagBitfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>COMMS_sendHeartbeat</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, comms.o(i.COMMS_sendHeartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMMS_sendHeartbeat
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_getBaseId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>COMMS_sendOcQMeas</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, comms.o(i.COMMS_sendOcQMeas))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>COMMS_sendOutMeas</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, comms.o(i.COMMS_sendOutMeas))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>COMMS_sendOutVoltCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, comms.o(i.COMMS_sendOutVoltCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMMS_sendOutVoltCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_getOutVoltCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>COMMS_sendP2pPacket</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, comms.o(i.COMMS_sendP2pPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COMMS_sendP2pPacket &rArr; COMMS_endFlashSend &rArr; FLASH_readStr
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_startWrite
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readStr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_endMemSend
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_endFlashSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>COMMS_sendPowTemprMeas</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, comms.o(i.COMMS_sendPowTemprMeas))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>COMMS_sendPvMeas</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, comms.o(i.COMMS_sendPvMeas))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>COMMS_sendStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, comms.o(i.COMMS_sendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COMMS_sendStatus &rArr; STATUS_update
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_getStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>COMMS_sendTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comms.o(i.COMMS_sendTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMMS_sendTime
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>COMMS_startFlashRec</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, comms.o(i.COMMS_startFlashRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = COMMS_startFlashRec &rArr; COMMS_sendDebugPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendDebugPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[9e]"></a>COMMS_startFlashSend</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, comms.o(i.COMMS_startFlashSend))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[99]"></a>COMMS_startMemSend</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, comms.o(i.COMMS_startMemSend))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[c2]"></a>CRC16_Update4Bits</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, crc16.o(i.CRC16_Update4Bits))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
</UL>

<P><STRONG><a name="[5]"></a>CTRL_calcOutVoltSetpoints</STRONG> (Thumb, 742 bytes, Stack size 48 bytes, ctrl.o(i.CTRL_calcOutVoltSetpoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CTRL_calcOutVoltSetpoints &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_decimalToBcd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getIsSlave
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>CTRL_checkBulkFloat</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, ctrl.o(i.CTRL_checkBulkFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTRL_checkBulkFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getIsSlave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[12d]"></a>CTRL_enableOutput</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl.o(i.CTRL_enableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[a5]"></a>CTRL_getOutVoltCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctrl.o(i.CTRL_getOutVoltCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendOutVoltCmd
</UL>

<P><STRONG><a name="[5e]"></a>CTRL_getStatus</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ctrl.o(i.CTRL_getStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTRL_getStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getIsSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>CTRL_init</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, ctrl.o(i.CTRL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CTRL_init &rArr; CTRL_calcOutVoltSetpoints &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAR_CTRL_setFltrimParams
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[ff]"></a>CTRL_setFltrimParams_new</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ctrl.o(i.CTRL_setFltrimParams_new))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAR_CTRL_setFltrimParams
</UL>

<P><STRONG><a name="[fe]"></a>CTRL_setFltrimParams_old</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ctrl.o(i.CTRL_setFltrimParams_old))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAR_CTRL_setFltrimParams
</UL>

<P><STRONG><a name="[95]"></a>CTRL_setOutVoltCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ctrl.o(i.CTRL_setOutVoltCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTRL_setOutVoltCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getIsSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[b7]"></a>CTRL_tick</STRONG> (Thumb, 1130 bytes, Stack size 48 bytes, ctrl.o(i.CTRL_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CTRL_tick &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_getStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_setDoUpdate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_filterFast
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_setVinLim
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_setMpptSamplePt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getOnOff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getGroundFault
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_enablePwmCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_disablePwmCtrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_isr
</UL>

<P><STRONG><a name="[c1]"></a>CalculateCRC16</STRONG> (Thumb, 226 bytes, Stack size 28 bytes, crc16.o(i.CalculateCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Update4Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePacket
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_flash
</UL>

<P><STRONG><a name="[c3]"></a>DCDC_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, dcdc.o(i.DCDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCDC_Init &rArr; initDmaForAdc &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAdcMasterAnalogWatchdogThresholds
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDmaForAdc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdcToDualRegularSimultaneousMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCoreIoPins
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHighResolutionTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>DCDC_Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dcdc.o(i.DCDC_Loop))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>DCDC_Start_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dcdc.o(i.DCDC_Start_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_enablePwmCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_disablePwmCtrl
</UL>

<P><STRONG><a name="[2c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dcdc.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dcdc.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>FLAG_checkAllFlags</STRONG> (Thumb, 1308 bytes, Stack size 48 bytes, flag.o(i.FLAG_checkAllFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FLAG_checkAllFlags &rArr; FLAG_checkFlagTrig &rArr; FLAG_logFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_isShutdown
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_logFlag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagTrig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagHold
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_configRangesOk
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAndWrite
</UL>

<P><STRONG><a name="[7]"></a>FLAG_checkAndWrite</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, flag.o(i.FLAG_checkAndWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FLAG_checkAndWrite &rArr; FLAG_checkAllFlags &rArr; FLAG_checkFlagTrig &rArr; FLAG_logFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_writeStr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_startWrite
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_swapActiveSector
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAllFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>FLAG_checkFlagHold</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, flag.o(i.FLAG_checkFlagHold))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLAG_checkFlagHold &rArr; FLAG_logFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_logFlag
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAllFlags
</UL>

<P><STRONG><a name="[ca]"></a>FLAG_checkFlagTrig</STRONG> (Thumb, 430 bytes, Stack size 72 bytes, flag.o(i.FLAG_checkFlagTrig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLAG_checkFlagTrig &rArr; FLAG_logFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_logFlag
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAllFlags
</UL>

<P><STRONG><a name="[56]"></a>FLAG_eraseDoneCallback</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, flag.o(i.FLAG_eraseDoneCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLAG_eraseDoneCallback &rArr; FLAG_logFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_logFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comms.o(i.COMMS_receive)
</UL>
<P><STRONG><a name="[a1]"></a>FLAG_eraseStarted</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flag.o(i.FLAG_eraseStarted))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[a4]"></a>FLAG_getFlagBitfield</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flag.o(i.FLAG_getFlagBitfield))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendFlag
</UL>

<P><STRONG><a name="[a0]"></a>FLAG_getFlagLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flag.o(i.FLAG_getFlagLen))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[5a]"></a>FLAG_getStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, flag.o(i.FLAG_getStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>FLAG_init</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, flag.o(i.FLAG_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLAG_init &rArr; FLAG_initTrigs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readU64
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readU16
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_eraseBlockBusy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_initTrigs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_getFlagLen
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[d2]"></a>FLAG_initTrigs</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, flag.o(i.FLAG_initTrigs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLAG_initTrigs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
</UL>

<P><STRONG><a name="[cc]"></a>FLAG_logFlag</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, flag.o(i.FLAG_logFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLAG_logFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_timeHasUpdated
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_eraseDoneCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagTrig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagHold
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAllFlags
</UL>

<P><STRONG><a name="[d0]"></a>FLAG_swapActiveSector</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flag.o(i.FLAG_swapActiveSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLAG_swapActiveSector
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_modAdd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_eraseBlockBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAndWrite
</UL>

<P><STRONG><a name="[d7]"></a>FLAG_timeHasUpdated</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flag.o(i.FLAG_timeHasUpdated))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLAG_timeHasUpdated &rArr; FLAG_logFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_logFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_set
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_endWriteData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash.o(i.FLASH_endWriteData))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_endFlashRec
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[a2]"></a>FLASH_erase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, flash.o(i.FLASH_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_startFlashRec
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[d5]"></a>FLASH_eraseBlockBusy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.FLASH_eraseBlockBusy))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_swapActiveSector
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_init
</UL>

<P><STRONG><a name="[11b]"></a>FLASH_getMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.FLASH_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_getStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.FLASH_getStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>FLASH_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(i.FLASH_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_writeRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_startFlashRec
</UL>

<P><STRONG><a name="[8d]"></a>FLASH_readStr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash.o(i.FLASH_readStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_readStr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readU64
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readU16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendP2pPacket
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_endFlashSend
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_flash
</UL>

<P><STRONG><a name="[d3]"></a>FLASH_readU16</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, flash.o(i.FLASH_readU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_readU16 &rArr; FLASH_readStr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readStr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_init
</UL>

<P><STRONG><a name="[d4]"></a>FLASH_readU64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, flash.o(i.FLASH_readU64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_readU64 &rArr; FLASH_readStr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readStr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_init
</UL>

<P><STRONG><a name="[a7]"></a>FLASH_startWrite</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash.o(i.FLASH_startWrite))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAndWrite
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendP2pPacket
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[a3]"></a>FLASH_writeStr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, flash.o(i.FLASH_writeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_writeStr
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_putToCircBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAndWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[4c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dcdc.o(i.HRTIM1_TIMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HRTIM1_TIMA_IRQHandler &rArr; endOfCycleExecute
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrtimerUpdateDuty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measureExecute
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endOfCycleExecute
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IO_disablePwmCtrl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm.o(i.IO_disablePwmCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_disablePwmCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Start_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[bf]"></a>IO_enablePwmCtrl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm.o(i.IO_enablePwmCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_enablePwmCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Start_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[15]"></a>IO_fanDrvPWM</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, io.o(i.IO_fanDrvPWM))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>IO_fanSenseSpeed</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, io.o(i.IO_fanSenseSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_isr
</UL>

<P><STRONG><a name="[16]"></a>IO_fanSetSpeed</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, io.o(i.IO_fanSetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IO_fanSetSpeed &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_fanShutdown
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_setFanDutyCycle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[fb]"></a>IO_getDigitalTemp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io.o(i.IO_getDigitalTemp))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_tick
</UL>

<P><STRONG><a name="[b8]"></a>IO_getGroundFault</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, io.o(i.IO_getGroundFault))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[ad]"></a>IO_getIsSlave</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, io.o(i.IO_getIsSlave))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_checkBulkFloat
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_setOutVoltCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_getStatus
</UL>

<P><STRONG><a name="[b9]"></a>IO_getOnOff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, io.o(i.IO_getOnOff))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[e2]"></a>IO_init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, io.o(i.IO_init))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[e0]"></a>IO_setFanDutyCycle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, io.o(i.IO_setFanDutyCycle))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_fanSetSpeed
</UL>

<P><STRONG><a name="[be]"></a>IQ_mpy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iqmath.o(i.IQ_mpy))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_filterFast
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_filter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[e1]"></a>MAIN_resetAllAndStart</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mainmsp.o(i.MAIN_resetAllAndStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MAIN_resetAllAndStart &rArr; lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAR_retreive_hware
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELEM_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATS_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brief_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPinit
</UL>

<P><STRONG><a name="[93]"></a>MAIN_resetRemoteCfg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mainmsp.o(i.MAIN_resetRemoteCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MAIN_resetRemoteCfg &rArr; lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_initTrigs
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_getBaseId
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[f0]"></a>MEAS_filter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, meas.o(i.MEAS_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MEAS_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_update
</UL>

<P><STRONG><a name="[bd]"></a>MEAS_filterFast</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, meas.o(i.MEAS_filterFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MEAS_filterFast
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[ea]"></a>MEAS_init</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, meas.o(i.MEAS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MEAS_init &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[ba]"></a>MEAS_setDoUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, meas.o(i.MEAS_setDoUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[f1]"></a>MEAS_update</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, meas.o(i.MEAS_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MEAS_update &rArr; MEAS_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_filter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MEAS_updateCharge</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, meas.o(i.MEAS_updateCharge))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>MEAS_updateTempr</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, meas.o(i.MEAS_updateTempr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MEAS_updateTempr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_getValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>PWM_isr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm.o(i.PWM_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PWM_isr &rArr; TEMP_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_tick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_fanSenseSpeed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>PWM_setMpptSamplePt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pwm.o(i.PWM_setMpptSamplePt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_setMpptSamplePt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVin
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[c0]"></a>PWM_setVinLim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm.o(i.PWM_setVinLim))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[dc]"></a>Regulator</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, dcdc.o(i.Regulator))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMA_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>SAFETY_fanShutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, safety.o(i.SAFETY_fanShutdown))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_fanSetSpeed
</UL>

<P><STRONG><a name="[5f]"></a>SAFETY_getStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, safety.o(i.SAFETY_getStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>SAFETY_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, safety.o(i.SAFETY_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SAFETY_init &rArr; VAR_SAFETY_setLimits &rArr; SAFETY_setLimitsMV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAR_SAFETY_setLimits
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[cd]"></a>SAFETY_isShutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, safety.o(i.SAFETY_isShutdown))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkAllFlags
</UL>

<P><STRONG><a name="[f8]"></a>SAFETY_setLimitsHV</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, safety.o(i.SAFETY_setLimitsHV))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAFETY_setLimitsHV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAR_SAFETY_setLimits
</UL>

<P><STRONG><a name="[f9]"></a>SAFETY_setLimitsMV</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, safety.o(i.SAFETY_setLimitsMV))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAFETY_setLimitsMV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAR_SAFETY_setLimits
</UL>

<P><STRONG><a name="[fa]"></a>SCH_incrMs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sch.o(i.SCH_incrMs))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e7]"></a>SCH_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sch.o(i.SCH_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[128]"></a>SCH_runActiveTasks</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sch.o(i.SCH_runActiveTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCH_runActiveTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPloop
</UL>

<P><STRONG><a name="[d8]"></a>SPI_writeRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.SPI_writeRead))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_init
</UL>

<P><STRONG><a name="[59]"></a>STATS_getStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stats.o(i.STATS_getStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>STATS_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stats.o(i.STATS_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[6]"></a>STATS_updateAll</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(i.STATS_updateAll))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>STATUS_getStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, status.o(i.STATUS_getStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendStatus
</UL>

<P><STRONG><a name="[e8]"></a>STATUS_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, status.o(i.STATUS_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[a8]"></a>STATUS_update</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, status.o(i.STATUS_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STATUS_update
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendStatus
</UL>

<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_incrMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_stm32f3xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>TELEM_getStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, telem.o(i.TELEM_getStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>TELEM_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, telem.o(i.TELEM_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[8]"></a>TELEM_logIfPeriodElapsed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, telem.o(i.TELEM_logIfPeriodElapsed))
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>TEMP_getValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, temp.o(i.TEMP_getValue))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_updateTempr
</UL>

<P><STRONG><a name="[e9]"></a>TEMP_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, temp.o(i.TEMP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEMP_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getDigitalTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[f5]"></a>TEMP_tick</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, temp.o(i.TEMP_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TEMP_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_getDigitalTemp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_isr
</UL>

<P><STRONG><a name="[3e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM3_IRQHandler &rArr; PWM_isr &rArr; TEMP_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>TIME_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(i.TIME_get))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_logFlag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagTrig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_checkFlagHold
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_sendTime
</UL>

<P><STRONG><a name="[e6]"></a>TIME_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, time.o(i.TIME_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[94]"></a>TIME_recFromBc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, time.o(i.TIME_recFromBc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIME_recFromBc &rArr; TIME_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[fd]"></a>TIME_set</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, time.o(i.TIME_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIME_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_timeHasUpdated
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_recFromBc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, usci.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UTIL_calcChecksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, util.o(i.UTIL_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_init
</UL>

<P><STRONG><a name="[ae]"></a>UTIL_decimalToBcd</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, util.o(i.UTIL_decimalToBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UTIL_decimalToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
</UL>

<P><STRONG><a name="[d6]"></a>UTIL_modAdd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, util.o(i.UTIL_modAdd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_swapActiveSector
</UL>

<P><STRONG><a name="[d9]"></a>UTIL_putToCircBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, util.o(i.UTIL_putToCircBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_writeStr
</UL>

<P><STRONG><a name="[b5]"></a>VAR_CTRL_setFltrimParams</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, variant.o(i.VAR_CTRL_setFltrimParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VAR_CTRL_setFltrimParams
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_setFltrimParams_old
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_setFltrimParams_new
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
</UL>

<P><STRONG><a name="[f7]"></a>VAR_SAFETY_setLimits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, variant.o(i.VAR_SAFETY_setLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VAR_SAFETY_setLimits &rArr; SAFETY_setLimitsMV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsMV
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsHV
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_init
</UL>

<P><STRONG><a name="[e4]"></a>VAR_retreive_hware</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, variant.o(i.VAR_retreive_hware))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[101]"></a>adcGpioConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, adc.o(i.adcGpioConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdcToDualRegularSimultaneousMode
</UL>

<P><STRONG><a name="[e3]"></a>brief_pause</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainmsp.o(i.brief_pause))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPinit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[db]"></a>endOfCycleExecute</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, dcdc.o(i.endOfCycleExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = endOfCycleExecute
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrtimersOutEnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrtimersOutDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMA_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>hrtimerUpdateDuty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hirestim.o(i.hrtimerUpdateDuty))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMA_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>hrtimersGpioInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, hirestim.o(i.hrtimersGpioInit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHighResolutionTimer
</UL>

<P><STRONG><a name="[83]"></a>hrtimersOutDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hirestim.o(i.hrtimersOutDisable))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endOfCycleExecute
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>hrtimersOutEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hirestim.o(i.hrtimersOutEnable))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endOfCycleExecute
</UL>

<P><STRONG><a name="[c5]"></a>initAdcToDualRegularSimultaneousMode</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, adc.o(i.initAdcToDualRegularSimultaneousMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initAdcToDualRegularSimultaneousMode &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGpioConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
</UL>

<P><STRONG><a name="[c4]"></a>initCoreIoPins</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, boardinit.o(i.initCoreIoPins))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
</UL>

<P><STRONG><a name="[c6]"></a>initDmaForAdc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adc.o(i.initDmaForAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initDmaForAdc &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
</UL>

<P><STRONG><a name="[c8]"></a>initHighResolutionTimer</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, hirestim.o(i.initHighResolutionTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initHighResolutionTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrtimersGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
</UL>

<P><STRONG><a name="[123]"></a>initTim3</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tim3.o(i.initTim3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initTim3
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>lcd_calibrationChanged</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd.o(i.lcd_calibrationChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_calibrationChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[90]"></a>lcd_canRecved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.lcd_canRecved))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
</UL>

<P><STRONG><a name="[105]"></a>lcd_checkPersistentUpdate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.lcd_checkPersistentUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_checkPersistentUpdate &rArr; lcd_startWritePersistent &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePersistent
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[111]"></a>lcd_check_calibration</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd.o(i.lcd_check_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_check_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[107]"></a>lcd_copyProductInfo</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcd.o(i.lcd_copyProductInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_copyProductInfo &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[57]"></a>lcd_eraseDoneCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.lcd_eraseDoneCallback))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.lcd_runCfgStateMachine)
</UL>
<P><STRONG><a name="[e5]"></a>lcd_init</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, lcd.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readStr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_remote_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_local_config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteCalibrationBackup
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_restoreCalibration
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_flash
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadUserDefaults
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadSysInfo
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadPersistentDefaults
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadMiscStateDefaults
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadFactoryDefaults
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadEventsDefaults
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_copyProductInfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_calibration
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_calibrationChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetRemoteCfg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[10c]"></a>lcd_loadEventsDefaults</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, lcd.o(i.lcd_loadEventsDefaults))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[10a]"></a>lcd_loadFactoryDefaults</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, lcd.o(i.lcd_loadFactoryDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_loadFactoryDefaults &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[10d]"></a>lcd_loadMiscStateDefaults</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(i.lcd_loadMiscStateDefaults))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[10e]"></a>lcd_loadPersistentDefaults</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.lcd_loadPersistentDefaults))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[10b]"></a>lcd_loadSysInfo</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lcd.o(i.lcd_loadSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_loadSysInfo &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[116]"></a>lcd_loadTelemetry</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, lcd.o(i.lcd_loadTelemetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_loadTelemetry &rArr; CTRL_getStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_getStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_getFlagBitfield
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_configRangesOk
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATS_getStatus
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_getStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_getStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELEM_getStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_getStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_getStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[109]"></a>lcd_loadUserDefaults</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, lcd.o(i.lcd_loadUserDefaults))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[117]"></a>lcd_queueWrite</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd.o(i.lcd_queueWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lcd_queueWrite &rArr; lcd_startWrite &rArr; lcd_startWriteUser &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[108]"></a>lcd_read_flash</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lcd.o(i.lcd_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_read_flash &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readStr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[114]"></a>lcd_restoreCalibration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.lcd_restoreCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[11a]"></a>lcd_runCfgStateMachine</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, lcd.o(i.lcd_runCfgStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lcd_runCfgStateMachine &rArr; uart_send &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_writeStr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_startWrite
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_readStr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_getMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_endWriteData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadUserDefaults
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadPersistentDefaults
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadMiscStateDefaults
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadFactoryDefaults
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadEventsDefaults
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_copyProductInfo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[118]"></a>lcd_startWrite</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lcd.o(i.lcd_startWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_startWrite &rArr; lcd_startWriteUser &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteUser
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteMiscState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteFactory
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_queueWrite
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[113]"></a>lcd_startWriteCalibrationBackup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd.o(i.lcd_startWriteCalibrationBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_startWriteCalibrationBackup
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[11f]"></a>lcd_startWriteEvents</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.lcd_startWriteEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_startWriteEvents &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWrite
</UL>

<P><STRONG><a name="[11d]"></a>lcd_startWriteFactory</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.lcd_startWriteFactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_startWriteFactory &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWrite
</UL>

<P><STRONG><a name="[120]"></a>lcd_startWriteMiscState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.lcd_startWriteMiscState))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_startWriteMiscState &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWrite
</UL>

<P><STRONG><a name="[121]"></a>lcd_startWritePacket</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lcd.o(i.lcd_startWritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteUser
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePersistent
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteMiscState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteFactory
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWriteEvents
</UL>

<P><STRONG><a name="[106]"></a>lcd_startWritePersistent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(i.lcd_startWritePersistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_startWritePersistent &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_checkPersistentUpdate
</UL>

<P><STRONG><a name="[11e]"></a>lcd_startWriteUser</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i.lcd_startWriteUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_startWriteUser &rArr; lcd_startWritePacket &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWrite
</UL>

<P><STRONG><a name="[13]"></a>lcd_update</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.lcd_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lcd_update &rArr; lcd_runCfgStateMachine &rArr; uart_send &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_startWrite
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>lcd_update_local_config</STRONG> (Thumb, 1156 bytes, Stack size 24 bytes, lcd.o(i.lcd_update_local_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[110]"></a>lcd_update_remote_config</STRONG> (Thumb, 592 bytes, Stack size 0 bytes, lcd.o(i.lcd_update_remote_config))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[12c]"></a>loadPassword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usci.o(i.loadPassword))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[6e]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; mainMSPloop &rArr; COMMS_receive &rArr; MAIN_resetRemoteCfg &rArr; lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemClock
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPloop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPinit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTim3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Loop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[124]"></a>mainMSPinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mainmsp.o(i.mainMSPinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mainMSPinit &rArr; MAIN_resetAllAndStart &rArr; lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brief_pause
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>mainMSPloop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mainmsp.o(i.mainMSPloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mainMSPloop &rArr; COMMS_receive &rArr; MAIN_resetRemoteCfg &rArr; lcd_init &rArr; lcd_update_local_config &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_runActiveTasks
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMMS_receive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>measureExecute</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, dcdc.o(i.measureExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = measureExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMA_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>setAdcMasterAnalogWatchdogThresholds</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(i.setAdcMasterAnalogWatchdogThresholds))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
</UL>

<P><STRONG><a name="[122]"></a>setSystemClock</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, boardinit.o(i.setSystemClock))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>setVin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcdc.o(i.setVin))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_setMpptSamplePt
</UL>

<P><STRONG><a name="[ef]"></a>uart_init</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, usci.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAIN_resetAllAndStart
</UL>

<P><STRONG><a name="[129]"></a>uart_receive</STRONG> (Thumb, 542 bytes, Stack size 32 bytes, usci.o(i.uart_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = uart_receive &rArr; uart_send_startup &rArr; uart_send_response &rArr; uart_send &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_queueWrite
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_loadTelemetry
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_checkPersistentUpdate
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_enableOutput
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_startup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_response
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_error
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadPassword
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_set
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMSPloop
</UL>

<P><STRONG><a name="[11c]"></a>uart_send</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, usci.o(i.uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart_send &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_response
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_runCfgStateMachine
</UL>

<P><STRONG><a name="[12b]"></a>uart_send_error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usci.o(i.uart_send_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uart_send_error &rArr; uart_send_response &rArr; uart_send &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[12e]"></a>uart_send_response</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usci.o(i.uart_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uart_send_response &rArr; uart_send &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_startup
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_error
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[12a]"></a>uart_send_startup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usci.o(i.uart_send_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uart_send_startup &rArr; uart_send_response &rArr; uart_send &rArr; CalculateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[12f]"></a>uart_tx</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usci.o(i.uart_tx))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[55]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
</UL>

<P><STRONG><a name="[131]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[134]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[13b]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_initTrigs
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsMV
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsHV
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[137]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_initTrigs
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsMV
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsHV
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_local_config
</UL>

<P><STRONG><a name="[138]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
</UL>

<P><STRONG><a name="[139]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
</UL>

<P><STRONG><a name="[17c]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_checkRanges
</UL>

<P><STRONG><a name="[13a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[13e]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_initTrigs
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsMV
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsHV
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_tick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_local_config
</UL>

<P><STRONG><a name="[13c]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[133]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[136]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_checkRanges
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_fanSetSpeed
</UL>

<P><STRONG><a name="[13d]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
</UL>

<P><STRONG><a name="[13f]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLAG_initTrigs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_checkRanges
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsMV
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_setLimitsHV
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAS_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_calcOutVoltSetpoints
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_fanSetSpeed
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_local_config
</UL>

<P><STRONG><a name="[141]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[142]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[65]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[17d]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[17e]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[132]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[103]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDmaForAdc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdcToDualRegularSimultaneousMode
</UL>

<P><STRONG><a name="[102]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDmaForAdc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdcToDualRegularSimultaneousMode
</UL>

<P><STRONG><a name="[140]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[135]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
