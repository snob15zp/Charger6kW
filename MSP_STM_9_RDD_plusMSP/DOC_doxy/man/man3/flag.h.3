<<<<<<< HEAD
.TH "D:/user/github/Charger6kW/MSP_STM_9_RDD_plusMSP/MSP430/flag.h" 3 "Sun Nov 29 2020" "Version 9" "Charger6kW" \" -*- nroff -*-
=======
.TH "D:/userSSD/github/Charger6kW/MSP_STM_9_RDD_plusMSP/MSP430/flag.h" 3 "Mon Nov 30 2020" "Version 9" "Charger6kW" \" -*- nroff -*-
>>>>>>> development
.ad l
.nh
.SH NAME
D:/userSSD/github/Charger6kW/MSP_STM_9_RDD_plusMSP/MSP430/flag.h
.SH SYNOPSIS
.br
.PP
\fC#include 'debug\&.h'\fP
.br
\fC#include 'iqmath\&.h'\fP
.br
\fC#include 'time\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBFlagCfgSimple_\fP"
.br
.ti -1c
.RI "struct \fBFlagCfgTrig_\fP"
.br
.ti -1c
.RI "struct \fBFlagCfgHold_\fP"
.br
.ti -1c
.RI "struct \fBFlagCfgSched_\fP"
.br
.ti -1c
.RI "struct \fBFlagState_\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBFLAG_CODE_FIRST_SD\fP   \fBFLAG_CODE_PVCURR_NEG_SD\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned long long \fBFlagBitfield\fP"
.br
.ti -1c
.RI "typedef enum \fBFLAG_Mode_\fP \fBFLAG_Mode\fP"
.br
.ti -1c
.RI "typedef struct \fBFlagCfgSimple_\fP \fBFlagCfgSimple\fP"
.br
.ti -1c
.RI "typedef struct \fBFlagCfgTrig_\fP \fBFlagCfgTrig\fP"
.br
.ti -1c
.RI "typedef struct \fBFlagCfgHold_\fP \fBFlagCfgHold\fP"
.br
.ti -1c
.RI "typedef struct \fBFlagCfgSched_\fP \fBFlagCfgSched\fP"
.br
.ti -1c
.RI "typedef enum \fBFLAG_Code_\fP \fBFLAG_Code\fP"
.br
.ti -1c
.RI "typedef enum \fBFLAG_State_\fP \fBFLAG_State\fP"
.br
.ti -1c
.RI "typedef struct \fBFlagState_\fP \fBFlagState\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBFLAG_Mode_\fP { \fBFLAG_DISABLED\fP = 0, \fBFLAG_LOG\fP, \fBFLAG_LOG_AND_RELAY\fP }"
.br
.ti -1c
.RI "enum \fBFLAG_Code_\fP { \fBFLAG_CODE_MIN\fP = 0, \fBFLAG_CODE_SYSTEM_INIT\fP = FLAG_CODE_MIN, \fBFLAG_CODE_LOW_OUT_VOLT_WARN\fP, \fBFLAG_CODE_LOW_OUT_VOLT_FAULT\fP, \fBFLAG_CODE_LOW_OUT_VOLT_GENSET\fP, \fBFLAG_CODE_HIGH_OUT_VOLT_FAULT\fP, \fBFLAG_CODE_HIGH_OUT_CURR_FAULT\fP, \fBFLAG_CODE_HIGH_DIS_CURR_FAULT\fP, \fBFLAG_CODE_HIGH_TEMP_FAULT\fP, \fBFLAG_CODE_IN_BREAKER_OPEN\fP, \fBFLAG_CODE_OUT_BREAKER_OPEN\fP, \fBFLAG_CODE_TEMP_SENSE_FAULT\fP, \fBFLAG_CODE_PVCURR_NEG_SD\fP, \fBFLAG_CODE_PVCURR_POS_SD\fP, \fBFLAG_CODE_PVVOLT_SD\fP, \fBFLAG_CODE_OUTCURR_POS_SD\fP, \fBFLAG_CODE_OUTVOLT_SD\fP, \fBFLAG_CODE_CASETMP_SD\fP, \fBFLAG_CODE_FAN_SD\fP, \fBFLAG_CODE_LOG_FULL\fP, \fBFLAG_CODE_PANEL_MISSING\fP, \fBFLAG_CODE_BAD_CFG_RANGE\fP, \fBFLAG_CODE_MAX\fP = FLAG_CODE_BAD_CFG_RANGE }"
.br
.ti -1c
.RI "enum { \fBCAN_TxBufferInd_NUM\fP = (CAN_TxBufferInd_MAX - CAN_TxBufferInd_MIN) + 1, \fBFLAG_CODE_NUM\fP = (FLAG_CODE_MAX - FLAG_CODE_MIN) + 1, \fBStatId_NUM\fP = (StatId_MAX - StatId_MIN) + 1 }"
.br
.ti -1c
.RI "enum \fBFLAG_State_\fP { \fBFLAG_STATE_INACTIVE\fP, \fBFLAG_STATE_ACTIVE\fP, \fBFLAG_STATE_INACTIVE_HYST\fP, \fBFLAG_STATE_ACTIVE_HYST\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBFLAG_init\fP (void)"
.br
.ti -1c
.RI "void \fBFLAG_initTrigs\fP (void)"
.br
.ti -1c
.RI "void \fBFLAG_timeHasUpdated\fP (void)"
.br
.ti -1c
.RI "unsigned char \fBFLAG_getStatus\fP (void)"
.br
.ti -1c
.RI "\fBFlagBitfield\fP \fBFLAG_getFlagBitfield\fP (void)"
.br
.ti -1c
.RI "void \fBFLAG_checkAllFlags\fP (void)"
.br
.ti -1c
.RI "int \fBFLAG_checkFlagTrig\fP (\fBFlagState\fP *pState, \fBFlagCfgTrig\fP *pCfg, \fBFLAG_Code\fP code)"
.br
.ti -1c
.RI "int \fBFLAG_checkFlagHold\fP (\fBFlagState\fP *pState, \fBFlagCfgHold\fP *pCfg, \fBFLAG_Code\fP code)"
.br
.ti -1c
.RI "int \fBFLAG_checkFlagSched\fP (\fBFlagState\fP *pState, \fBFlagCfgSched\fP *pCfg, \fBFLAG_Code\fP code)"
.br
.ti -1c
.RI "void \fBFLAG_logFlag\fP (\fBFLAG_Code\fP code, int isActive)"
.br
.ti -1c
.RI "void \fBFLAG_checkAndWrite\fP (void)"
.br
.ti -1c
.RI "void \fBFLAG_eraseStarted\fP (void)"
.br
.ti -1c
.RI "void \fBFLAG_eraseDoneCallback\fP (int retVal)"
.br
.ti -1c
.RI "unsigned long \fBFLAG_getFlagLen\fP (void)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define FLAG_CODE_FIRST_SD   \fBFLAG_CODE_PVCURR_NEG_SD\fP"

.PP
Definition at line 89 of file flag\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBFLAG_Code_\fP \fBFLAG_Code\fP"

.SS "typedef enum \fBFLAG_Mode_\fP \fBFLAG_Mode\fP"

.SS "typedef enum \fBFLAG_State_\fP \fBFLAG_State\fP"

.SS "typedef unsigned long long \fBFlagBitfield\fP"

.PP
Definition at line 19 of file flag\&.h\&.
.SS "typedef struct \fBFlagCfgHold_\fP \fBFlagCfgHold\fP"

.SS "typedef struct \fBFlagCfgSched_\fP \fBFlagCfgSched\fP"

.SS "typedef struct \fBFlagCfgSimple_\fP \fBFlagCfgSimple\fP"

.SS "typedef struct \fBFlagCfgTrig_\fP \fBFlagCfgTrig\fP"

.SS "typedef struct \fBFlagState_\fP \fBFlagState\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICAN_TxBufferInd_NUM \fP\fP
.TP
\fB\fIFLAG_CODE_NUM \fP\fP
.TP
\fB\fIStatId_NUM \fP\fP
.PP
Definition at line 87 of file flag\&.h\&.
.SS "enum \fBFLAG_Code_\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAG_CODE_MIN \fP\fP
.TP
\fB\fIFLAG_CODE_SYSTEM_INIT \fP\fP
.TP
\fB\fIFLAG_CODE_LOW_OUT_VOLT_WARN \fP\fP
.TP
\fB\fIFLAG_CODE_LOW_OUT_VOLT_FAULT \fP\fP
.TP
\fB\fIFLAG_CODE_LOW_OUT_VOLT_GENSET \fP\fP
.TP
\fB\fIFLAG_CODE_HIGH_OUT_VOLT_FAULT \fP\fP
.TP
\fB\fIFLAG_CODE_HIGH_OUT_CURR_FAULT \fP\fP
.TP
\fB\fIFLAG_CODE_HIGH_DIS_CURR_FAULT \fP\fP
.TP
\fB\fIFLAG_CODE_HIGH_TEMP_FAULT \fP\fP
.TP
\fB\fIFLAG_CODE_IN_BREAKER_OPEN \fP\fP
.TP
\fB\fIFLAG_CODE_OUT_BREAKER_OPEN \fP\fP
.TP
\fB\fIFLAG_CODE_TEMP_SENSE_FAULT \fP\fP
.TP
\fB\fIFLAG_CODE_PVCURR_NEG_SD \fP\fP
.TP
\fB\fIFLAG_CODE_PVCURR_POS_SD \fP\fP
.TP
\fB\fIFLAG_CODE_PVVOLT_SD \fP\fP
.TP
\fB\fIFLAG_CODE_OUTCURR_POS_SD \fP\fP
.TP
\fB\fIFLAG_CODE_OUTVOLT_SD \fP\fP
.TP
\fB\fIFLAG_CODE_CASETMP_SD \fP\fP
.TP
\fB\fIFLAG_CODE_FAN_SD \fP\fP
.TP
\fB\fIFLAG_CODE_LOG_FULL \fP\fP
.TP
\fB\fIFLAG_CODE_PANEL_MISSING \fP\fP
.TP
\fB\fIFLAG_CODE_BAD_CFG_RANGE \fP\fP
.TP
\fB\fIFLAG_CODE_MAX \fP\fP
.PP
Definition at line 61 of file flag\&.h\&.
.SS "enum \fBFLAG_Mode_\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAG_DISABLED \fP\fP
.TP
\fB\fIFLAG_LOG \fP\fP
.TP
\fB\fIFLAG_LOG_AND_RELAY \fP\fP
.PP
Definition at line 21 of file flag\&.h\&.
.SS "enum \fBFLAG_State_\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLAG_STATE_INACTIVE \fP\fP
.TP
\fB\fIFLAG_STATE_ACTIVE \fP\fP
.TP
\fB\fIFLAG_STATE_INACTIVE_HYST \fP\fP
.TP
\fB\fIFLAG_STATE_ACTIVE_HYST \fP\fP
.PP
Definition at line 91 of file flag\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void FLAG_checkAllFlags (void)"
RDDtemp flagStates\&.logFullFlag = ( \fBTELEM_isFull()\fP ) ? FLAG_STATE_ACTIVE : FLAG_STATE_INACTIVE;
.PP
RDDtemp IO_setRelay( flag\&.flagBitfieldRelay );
.PP
Definition at line 213 of file flag\&.c\&.
.SS "void FLAG_checkAndWrite (void)"

.PP
Definition at line 535 of file flag\&.c\&.
.SS "int FLAG_checkFlagHold (\fBFlagState\fP * pState, \fBFlagCfgHold\fP * pCfg, \fBFLAG_Code\fP code)"

.PP
Definition at line 425 of file flag\&.c\&.
.SS "int FLAG_checkFlagSched (\fBFlagState\fP * pState, \fBFlagCfgSched\fP * pCfg, \fBFLAG_Code\fP code)"

.PP
Definition at line 475 of file flag\&.c\&.
.SS "int FLAG_checkFlagTrig (\fBFlagState\fP * pState, \fBFlagCfgTrig\fP * pCfg, \fBFLAG_Code\fP code)"

.PP
Definition at line 378 of file flag\&.c\&.
.SS "void FLAG_eraseDoneCallback (int retVal)"

.PP
Definition at line 596 of file flag\&.c\&.
.SS "void FLAG_eraseStarted (void)"

.PP
Definition at line 591 of file flag\&.c\&.
.SS "\fBFlagBitfield\fP FLAG_getFlagBitfield (void)"

.PP
Definition at line 192 of file flag\&.c\&.
.SS "unsigned long FLAG_getFlagLen (void)"

.PP
Definition at line 631 of file flag\&.c\&.
.SS "unsigned char FLAG_getStatus (void)"

.PP
Definition at line 187 of file flag\&.c\&.
.SS "void FLAG_init (void)"

.PP
Definition at line 74 of file flag\&.c\&.
.SS "void FLAG_initTrigs (void)"
not now flagStates\&.lowOutVoltWarnFlag\&.triggerVal = IQ_cnst( CFG_remoteCfg\&.lowOutVoltWarnFlag\&.triggerVal / MEAS_OUTVOLT_BASE ); not now flagStates\&.lowOutVoltWarnFlag\&.resetVal = IQ_cnst( CFG_remoteCfg\&.lowOutVoltWarnFlag\&.resetVal / MEAS_OUTVOLT_BASE ); not now flagStates\&.lowOutVoltFaultFlag\&.triggerVal = IQ_cnst( CFG_remoteCfg\&.lowOutVoltFaultFlag\&.triggerVal / MEAS_OUTVOLT_BASE );
.PP
not now flagStates\&.highOutCurrFaultFlag\&.triggerVal = IQ_cnst( CFG_remoteCfg\&.highOutCurrFaultFlag\&.triggerVal / MEAS_OUTCURR_BASE ); not now flagStates\&.highOutCurrFaultFlag\&.resetVal = IQ_cnst( CFG_remoteCfg\&.highOutCurrFaultFlag\&.resetVal / MEAS_OUTCURR_BASE ); not now flagStates\&.highDisCurrFaultFlag\&.triggerVal = IQ_cnst( CFG_remoteCfg\&.highDisCurrFaultFlag\&.triggerVal / MEAS_OUTCURR_BASE );
.PP
not now flagStates\&.highTempFaultFlag\&.triggerVal = IQ_cnst( CFG_remoteCfg\&.highTempFaultFlag\&.triggerVal / MEAS_TEMPR_BASE ); not now flagStates\&.highTempFaultFlag\&.resetVal = IQ_cnst( CFG_remoteCfg\&.highTempFaultFlag\&.resetVal / MEAS_TEMPR_BASE ); not now flagStates\&.panelMissingFlag\&.triggerVal = IQ_cnst( CFG_remoteCfg\&.panelMissingFlag\&.triggerVal / MEAS_PVVOLT_BASE );
.PP
Definition at line 158 of file flag\&.c\&.
.SS "void FLAG_logFlag (\fBFLAG_Code\fP code, int isActive)"

.PP
Definition at line 518 of file flag\&.c\&.
.SS "void FLAG_timeHasUpdated (void)"

.PP
Definition at line 178 of file flag\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Charger6kW from the source code\&.
